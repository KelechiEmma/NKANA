// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NKANA.Data;

namespace NKANA.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NKANA.Models.ArtWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ThumnailImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtWorks");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtWorkId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryId", "ArtWorkId");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("ArtWorkCategories");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtWorkId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtWorkId");

                    b.ToTable("ArtWorkImages");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtWorkId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("ArtWorkRequests");
                });

            modelBuilder.Entity("NKANA.Models.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnrolled")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("NKANA.Models.ArtistSkill", b =>
                {
                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ArtistSkills");
                });

            modelBuilder.Entity("NKANA.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInNavbar")
                        .HasColumnType("bit");

                    b.Property<string>("ThumnailImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NKANA.Models.NkanaRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1135f23e-fcafce7b94ae-2eaf44ef830d",
                            ConcurrencyStamp = "0858238f-f3b3-42f7-a34b-d43d54e02462",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bede-69a91d0e771d-4f974cf1-bc02-4aa7",
                            ConcurrencyStamp = "6954fc97-7e60-45ed-a80f-e319a40399b0",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        },
                        new
                        {
                            Id = "1135f23e-44ef-2eaf-830d-7b94aefcafce",
                            ConcurrencyStamp = "c6d848c3-4885-4ca6-b88c-a5e93187bac8",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("NKANA.Models.NkanaRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("NKANA.Models.NkanaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4f974cf1-bc02-4aa7-bede-69a91d0e771d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa7ff9e8-fae8-4a2e-8664-a32dce6d7332",
                            Email = "admin@acdte.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ACDTE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXP8qq84anuzQkszIvCVMnQYrgE6iKWHkppA6JH6w8/116oC+X5VKvPOw941/asYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa7ff9e8-fae8-4a2e-8664-a32dce6d7332",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "0e20a2de-342e-4b9d-a153-1c180e7f6435",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66e5e17c-7391-4937-9a82-bc36661a2f7e",
                            Email = "superadmin@acdte.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@ACDTE.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEELp6FqpcHmlQMXwrflJ4BAsAa3jwm133/AWr99VcuOQoBvMHGz78IRt3EOtXUfIyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66e5e17c-7391-4937-9a82-bc36661a2f7e",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "1135f23e-2eaf-44ef-830d-fcafce7b94ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa7ff9e8-fae8-4a2e-a32dce6d7332-8664",
                            Email = "system@acdte.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEM@ACDTE.COM",
                            NormalizedUserName = "SYSTEM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXP8qq84anuzQkszIvCVMnQYrgE6iKWHkppA6JH6w8/116oC+X5VKvPOw941/asYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa7ff9e8-fae8-4a2e-a32dce6d7332-8664",
                            TwoFactorEnabled = false,
                            UserName = "System"
                        },
                        new
                        {
                            Id = "1135f23e-44ef-2eaf-830d-7b94aefcafce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7391-66e5e17c-4937-9a82-bc36661a2f7e",
                            Email = "africhina@acdte.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AFRICHINA@ACDTE.COM",
                            NormalizedUserName = "AFRICHINA",
                            PasswordHash = "AQAAAAEAACcQAAAAEELp6FqpcHmlQMXwrflJ4BAsAa3jwm133/AWr99VcuOQoBvMHGz78IRt3EOtXUfIyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7391-66e5e17c-4937-9a82-bc36661a2f7e",
                            TwoFactorEnabled = false,
                            UserName = "Africhina"
                        });
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0e20a2de-342e-4b9d-a153-1c180e7f6435",
                            RoleId = "1135f23e-fcafce7b94ae-2eaf44ef830d"
                        },
                        new
                        {
                            UserId = "0e20a2de-342e-4b9d-a153-1c180e7f6435",
                            RoleId = "1135f23e-44ef-2eaf-830d-7b94aefcafce"
                        },
                        new
                        {
                            UserId = "1135f23e-2eaf-44ef-830d-fcafce7b94ae",
                            RoleId = "1135f23e-fcafce7b94ae-2eaf44ef830d"
                        },
                        new
                        {
                            UserId = "1135f23e-2eaf-44ef-830d-fcafce7b94ae",
                            RoleId = "1135f23e-44ef-2eaf-830d-7b94aefcafce"
                        },
                        new
                        {
                            UserId = "1135f23e-44ef-2eaf-830d-7b94aefcafce",
                            RoleId = "1135f23e-fcafce7b94ae-2eaf44ef830d"
                        },
                        new
                        {
                            UserId = "1135f23e-44ef-2eaf-830d-7b94aefcafce",
                            RoleId = "1135f23e-44ef-2eaf-830d-7b94aefcafce"
                        },
                        new
                        {
                            UserId = "4f974cf1-bc02-4aa7-bede-69a91d0e771d",
                            RoleId = "1135f23e-fcafce7b94ae-2eaf44ef830d"
                        });
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NKANA.Models.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("NKANA.Models.ArtWork", b =>
                {
                    b.HasOne("NKANA.Models.Artist", "Artist")
                        .WithMany("ArtWorks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkCategory", b =>
                {
                    b.HasOne("NKANA.Models.ArtWork", "ArtWork")
                        .WithMany("ArtWorkCategories")
                        .HasForeignKey("ArtWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NKANA.Models.Category", "Category")
                        .WithMany("ArtWorkCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtWork");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkImage", b =>
                {
                    b.HasOne("NKANA.Models.ArtWork", "ArtWork")
                        .WithMany("ArtWorkImages")
                        .HasForeignKey("ArtWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtWork");
                });

            modelBuilder.Entity("NKANA.Models.ArtWorkRequest", b =>
                {
                    b.HasOne("NKANA.Models.ArtWork", "ArtWork")
                        .WithMany()
                        .HasForeignKey("ArtWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NKANA.Models.NkanaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NKANA.Models.ArtistSkill", b =>
                {
                    b.HasOne("NKANA.Models.Artist", "Artist")
                        .WithMany("ArtistSkills")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NKANA.Models.Skill", "Skill")
                        .WithMany("ArtistSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NKANA.Models.NkanaRoleClaim", b =>
                {
                    b.HasOne("NKANA.Models.NkanaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserClaim", b =>
                {
                    b.HasOne("NKANA.Models.NkanaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserLogin", b =>
                {
                    b.HasOne("NKANA.Models.NkanaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserRole", b =>
                {
                    b.HasOne("NKANA.Models.NkanaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NKANA.Models.NkanaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NKANA.Models.NkanaUserToken", b =>
                {
                    b.HasOne("NKANA.Models.NkanaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NKANA.Models.ArtWork", b =>
                {
                    b.Navigation("ArtWorkCategories");

                    b.Navigation("ArtWorkImages");
                });

            modelBuilder.Entity("NKANA.Models.Artist", b =>
                {
                    b.Navigation("ArtistSkills");

                    b.Navigation("ArtWorks");
                });

            modelBuilder.Entity("NKANA.Models.Category", b =>
                {
                    b.Navigation("ArtWorkCategories");
                });

            modelBuilder.Entity("NKANA.Models.Skill", b =>
                {
                    b.Navigation("ArtistSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
